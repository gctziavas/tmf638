/*
 * Service Inventory Management
 *
 * ## TMF API Reference : TMF 638 - Service Inventory Management   Version 4.0   The intent of this API is to provide a consistent/standardized mechanism to query and manipulate the Service inventory.  The Service Inventory API can be used to query the service instances for a customer via Self Service Portal or the Call Centre operator can query the service instances on behalf of the customer while a customer may have a complaint or a query. Note: Only the CustomerFacingServices instances will be presented to the customer.  The Service Inventory API can be called by the Service Order Management to create a new service instance/ update an existing service instance in the Service Inventory.  ### Service resource Service is an abstract base class for defining the Service hierarchy. All Services are characterized as either being possibly visible and usable by a Customer or not. This gives rise to the two subclasses of  Service: CustomerFacingService and ResourceFacingService.  ### Service Inventory API performs the following operations on service  : - Retrieve  a service or a collection of services depending on filter criteria - Partial update of a service (including updating rules) - Create a service (including default values and creation rules and for administration users only) - Delete a service (for administration users only) - Notification of events on service  Copyright (c)TM Forum 2019. All Rights Reserved.
 *
 * API version: 4.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package tmf638

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ServiceApiController binds http requests to an api service and writes the service results to the http response
type ServiceApiController struct {
	service      ServiceApiServicer
	errorHandler ErrorHandler
}

// ServiceApiOption for how the controller is set up.
type ServiceApiOption func(*ServiceApiController)

// WithServiceApiErrorHandler inject ErrorHandler into controller
func WithServiceApiErrorHandler(h ErrorHandler) ServiceApiOption {
	return func(c *ServiceApiController) {
		c.errorHandler = h
	}
}

// NewServiceApiController creates a default api controller
func NewServiceApiController(s ServiceApiServicer, opts ...ServiceApiOption) Router {
	controller := &ServiceApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ServiceApiController
func (c *ServiceApiController) Routes() Routes {
	return Routes{
		{
			"CreateService",
			strings.ToUpper("Post"),
			"/tmf-api/serviceInventory/v4/service",
			c.CreateService,
		},
		{
			"DeleteService",
			strings.ToUpper("Delete"),
			"/tmf-api/serviceInventory/v4/service/{id}",
			c.DeleteService,
		},
		{
			"ListService",
			strings.ToUpper("Get"),
			"/tmf-api/serviceInventory/v4/service",
			c.ListService,
		},
		{
			"PatchService",
			strings.ToUpper("Patch"),
			"/tmf-api/serviceInventory/v4/service/{id}",
			c.PatchService,
		},
		{
			"RetrieveService",
			strings.ToUpper("Get"),
			"/tmf-api/serviceInventory/v4/service/{id}",
			c.RetrieveService,
		},
	}
}

// CreateService - Creates a Service
func (c *ServiceApiController) CreateService(w http.ResponseWriter, r *http.Request) {
	serviceParam := ServiceCreate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&serviceParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceCreateRequired(serviceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateService(r.Context(), serviceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}

	

	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteService - Deletes a Service
func (c *ServiceApiController) DeleteService(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]

	result, err := c.service.DeleteService(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListService - List or find Service objects
func (c *ServiceApiController) ListService(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	fieldsParam := query.Get("fields")
	offsetParam, err := parseInt32Parameter(query.Get("offset"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	limitParam, err := parseInt32Parameter(query.Get("limit"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListService(r.Context(), fieldsParam, offsetParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PatchService - Updates partially a Service
func (c *ServiceApiController) PatchService(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]

	serviceParam := ServiceUpdate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&serviceParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceUpdateRequired(serviceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PatchService(r.Context(), idParam, serviceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RetrieveService - Retrieves a Service by ID
func (c *ServiceApiController) RetrieveService(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]

	fieldsParam := query.Get("fields")
	result, err := c.service.RetrieveService(r.Context(), idParam, fieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
