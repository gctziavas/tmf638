/*
 * Service Inventory Management
 *
 * ## TMF API Reference : TMF 638 - Service Inventory Management   Version 4.0   The intent of this API is to provide a consistent/standardized mechanism to query and manipulate the Service inventory.  The Service Inventory API can be used to query the service instances for a customer via Self Service Portal or the Call Centre operator can query the service instances on behalf of the customer while a customer may have a complaint or a query. Note: Only the CustomerFacingServices instances will be presented to the customer.  The Service Inventory API can be called by the Service Order Management to create a new service instance/ update an existing service instance in the Service Inventory.  ### Service resource Service is an abstract base class for defining the Service hierarchy. All Services are characterized as either being possibly visible and usable by a Customer or not. This gives rise to the two subclasses of  Service: CustomerFacingService and ResourceFacingService.  ### Service Inventory API performs the following operations on service  : - Retrieve  a service or a collection of services depending on filter criteria - Partial update of a service (including updating rules) - Create a service (including default values and creation rules and for administration users only) - Delete a service (for administration users only) - Notification of events on service  Copyright (c)TM Forum 2019. All Rights Reserved.
 *
 * API version: 4.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package tmf638

import (
	"encoding/json"
	"net/http"
	"strings"
	// "github.com/gorilla/mux"
)

// NotificationListenersClientSideApiController binds http requests to an api service and writes the service results to the http response
type NotificationListenersClientSideApiController struct {
	service      NotificationListenersClientSideApiServicer
	errorHandler ErrorHandler
}

// NotificationListenersClientSideApiOption for how the controller is set up.
type NotificationListenersClientSideApiOption func(*NotificationListenersClientSideApiController)

// WithNotificationListenersClientSideApiErrorHandler inject ErrorHandler into controller
func WithNotificationListenersClientSideApiErrorHandler(h ErrorHandler) NotificationListenersClientSideApiOption {
	return func(c *NotificationListenersClientSideApiController) {
		c.errorHandler = h
	}
}

// NewNotificationListenersClientSideApiController creates a default api controller
func NewNotificationListenersClientSideApiController(s NotificationListenersClientSideApiServicer, opts ...NotificationListenersClientSideApiOption) Router {
	controller := &NotificationListenersClientSideApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the NotificationListenersClientSideApiController
func (c *NotificationListenersClientSideApiController) Routes() Routes {
	return Routes{
		{
			"ListenToServiceAttributeValueChangeEvent",
			strings.ToUpper("Post"),
			"/tmf-api/serviceInventory/v4/listener/serviceAttributeValueChangeEvent",
			c.ListenToServiceAttributeValueChangeEvent,
		},
		{
			"ListenToServiceCreateEvent",
			strings.ToUpper("Post"),
			"/tmf-api/serviceInventory/v4/listener/serviceCreateEvent",
			c.ListenToServiceCreateEvent,
		},
		{
			"ListenToServiceDeleteEvent",
			strings.ToUpper("Post"),
			"/tmf-api/serviceInventory/v4/listener/serviceDeleteEvent",
			c.ListenToServiceDeleteEvent,
		},
		{
			"ListenToServiceStateChangeEvent",
			strings.ToUpper("Post"),
			"/tmf-api/serviceInventory/v4/listener/serviceStateChangeEvent",
			c.ListenToServiceStateChangeEvent,
		},
	}
}

// ListenToServiceAttributeValueChangeEvent - Client listener for entity ServiceAttributeValueChangeEvent
func (c *NotificationListenersClientSideApiController) ListenToServiceAttributeValueChangeEvent(w http.ResponseWriter, r *http.Request) {
	dataParam := ServiceAttributeValueChangeEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dataParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceAttributeValueChangeEventRequired(dataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ListenToServiceAttributeValueChangeEvent(r.Context(), dataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListenToServiceCreateEvent - Client listener for entity ServiceCreateEvent
func (c *NotificationListenersClientSideApiController) ListenToServiceCreateEvent(w http.ResponseWriter, r *http.Request) {
	dataParam := ServiceCreateEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dataParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceCreateEventRequired(dataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ListenToServiceCreateEvent(r.Context(), dataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListenToServiceDeleteEvent - Client listener for entity ServiceDeleteEvent
func (c *NotificationListenersClientSideApiController) ListenToServiceDeleteEvent(w http.ResponseWriter, r *http.Request) {
	dataParam := ServiceDeleteEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dataParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceDeleteEventRequired(dataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ListenToServiceDeleteEvent(r.Context(), dataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListenToServiceStateChangeEvent - Client listener for entity ServiceStateChangeEvent
func (c *NotificationListenersClientSideApiController) ListenToServiceStateChangeEvent(w http.ResponseWriter, r *http.Request) {
	dataParam := ServiceStateChangeEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dataParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceStateChangeEventRequired(dataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ListenToServiceStateChangeEvent(r.Context(), dataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
