/*
 * Service Inventory Management
 *
 * ## TMF API Reference : TMF 638 - Service Inventory Management   Version 4.0   The intent of this API is to provide a consistent/standardized mechanism to query and manipulate the Service inventory.  The Service Inventory API can be used to query the service instances for a customer via Self Service Portal or the Call Centre operator can query the service instances on behalf of the customer while a customer may have a complaint or a query. Note: Only the CustomerFacingServices instances will be presented to the customer.  The Service Inventory API can be called by the Service Order Management to create a new service instance/ update an existing service instance in the Service Inventory.  ### Service resource Service is an abstract base class for defining the Service hierarchy. All Services are characterized as either being possibly visible and usable by a Customer or not. This gives rise to the two subclasses of  Service: CustomerFacingService and ResourceFacingService.  ### Service Inventory API performs the following operations on service  : - Retrieve  a service or a collection of services depending on filter criteria - Partial update of a service (including updating rules) - Create a service (including default values and creation rules and for administration users only) - Delete a service (for administration users only) - Notification of events on service  Copyright (c)TM Forum 2019. All Rights Reserved.
 *
 * API version: 4.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package tmf638

import (
	"context"
	"net/http"
)

// EventsSubscriptionApiRouter defines the required methods for binding the api requests to a responses for the EventsSubscriptionApi
// The EventsSubscriptionApiRouter implementation should parse necessary information from the http request,
// pass the data to a EventsSubscriptionApiServicer to perform the required actions, then write the service results to the http response.
type EventsSubscriptionApiRouter interface {
	RegisterListener(http.ResponseWriter, *http.Request)
	UnregisterListener(http.ResponseWriter, *http.Request)
}

// NotificationListenersClientSideApiRouter defines the required methods for binding the api requests to a responses for the NotificationListenersClientSideApi
// The NotificationListenersClientSideApiRouter implementation should parse necessary information from the http request,
// pass the data to a NotificationListenersClientSideApiServicer to perform the required actions, then write the service results to the http response.
type NotificationListenersClientSideApiRouter interface {
	ListenToServiceAttributeValueChangeEvent(http.ResponseWriter, *http.Request)
	ListenToServiceCreateEvent(http.ResponseWriter, *http.Request)
	ListenToServiceDeleteEvent(http.ResponseWriter, *http.Request)
	ListenToServiceStateChangeEvent(http.ResponseWriter, *http.Request)
}

// ServiceApiRouter defines the required methods for binding the api requests to a responses for the ServiceApi
// The ServiceApiRouter implementation should parse necessary information from the http request,
// pass the data to a ServiceApiServicer to perform the required actions, then write the service results to the http response.
type ServiceApiRouter interface {
	CreateService(http.ResponseWriter, *http.Request)
	DeleteService(http.ResponseWriter, *http.Request)
	ListService(http.ResponseWriter, *http.Request)
	PatchService(http.ResponseWriter, *http.Request)
	RetrieveService(http.ResponseWriter, *http.Request)
}

// EventsSubscriptionApiServicer defines the api actions for the EventsSubscriptionApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type EventsSubscriptionApiServicer interface {
	RegisterListener(context.Context, EventSubscriptionInput) (ImplResponse, error)
	UnregisterListener(context.Context, string) (ImplResponse, error)
}

// NotificationListenersClientSideApiServicer defines the api actions for the NotificationListenersClientSideApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type NotificationListenersClientSideApiServicer interface {
	ListenToServiceAttributeValueChangeEvent(context.Context, ServiceAttributeValueChangeEvent) (ImplResponse, error)
	ListenToServiceCreateEvent(context.Context, ServiceCreateEvent) (ImplResponse, error)
	ListenToServiceDeleteEvent(context.Context, ServiceDeleteEvent) (ImplResponse, error)
	ListenToServiceStateChangeEvent(context.Context, ServiceStateChangeEvent) (ImplResponse, error)
}

// ServiceApiServicer defines the api actions for the ServiceApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ServiceApiServicer interface {
	CreateService(context.Context, ServiceCreate) (ImplResponse, error)
	DeleteService(context.Context, string) (ImplResponse, error)
	ListService(context.Context, string, int32, int32) (ImplResponse, error)
	PatchService(context.Context, string, ServiceUpdate) (ImplResponse, error)
	RetrieveService(context.Context, string, string) (ImplResponse, error)
}
