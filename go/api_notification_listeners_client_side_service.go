/*
 * Service Inventory Management
 *
 * ## TMF API Reference : TMF 638 - Service Inventory Management   Version 4.0   The intent of this API is to provide a consistent/standardized mechanism to query and manipulate the Service inventory.  The Service Inventory API can be used to query the service instances for a customer via Self Service Portal or the Call Centre operator can query the service instances on behalf of the customer while a customer may have a complaint or a query. Note: Only the CustomerFacingServices instances will be presented to the customer.  The Service Inventory API can be called by the Service Order Management to create a new service instance/ update an existing service instance in the Service Inventory.  ### Service resource Service is an abstract base class for defining the Service hierarchy. All Services are characterized as either being possibly visible and usable by a Customer or not. This gives rise to the two subclasses of  Service: CustomerFacingService and ResourceFacingService.  ### Service Inventory API performs the following operations on service  : - Retrieve  a service or a collection of services depending on filter criteria - Partial update of a service (including updating rules) - Create a service (including default values and creation rules and for administration users only) - Delete a service (for administration users only) - Notification of events on service  Copyright (c)TM Forum 2019. All Rights Reserved.
 *
 * API version: 4.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package tmf638

import (
	"context"
	"net/http"
	"errors"
)

// NotificationListenersClientSideApiService is a service that implements the logic for the NotificationListenersClientSideApiServicer
// This service should implement the business logic for every endpoint for the NotificationListenersClientSideApi API.
// Include any external packages or services that will be required by this service.
type NotificationListenersClientSideApiService struct {
}

// NewNotificationListenersClientSideApiService creates a default api service
func NewNotificationListenersClientSideApiService() NotificationListenersClientSideApiServicer {
	return &NotificationListenersClientSideApiService{}
}

// ListenToServiceAttributeValueChangeEvent - Client listener for entity ServiceAttributeValueChangeEvent
func (s *NotificationListenersClientSideApiService) ListenToServiceAttributeValueChangeEvent(ctx context.Context, data ServiceAttributeValueChangeEvent) (ImplResponse, error) {
	// TODO - update ListenToServiceAttributeValueChangeEvent with the required logic for this service method.
	// Add api_notification_listeners_client_side_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(201, EventSubscription{}) or use other options such as http.Ok ...
	//return Response(201, EventSubscription{}), nil

	//TODO: Uncomment the next line to return response Response(400, Error{}) or use other options such as http.Ok ...
	//return Response(400, Error{}), nil

	//TODO: Uncomment the next line to return response Response(401, Error{}) or use other options such as http.Ok ...
	//return Response(401, Error{}), nil

	//TODO: Uncomment the next line to return response Response(403, Error{}) or use other options such as http.Ok ...
	//return Response(403, Error{}), nil

	//TODO: Uncomment the next line to return response Response(404, Error{}) or use other options such as http.Ok ...
	//return Response(404, Error{}), nil

	//TODO: Uncomment the next line to return response Response(405, Error{}) or use other options such as http.Ok ...
	//return Response(405, Error{}), nil

	//TODO: Uncomment the next line to return response Response(409, Error{}) or use other options such as http.Ok ...
	//return Response(409, Error{}), nil

	//TODO: Uncomment the next line to return response Response(500, Error{}) or use other options such as http.Ok ...
	//return Response(500, Error{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("ListenToServiceAttributeValueChangeEvent method not implemented")
}

// ListenToServiceCreateEvent - Client listener for entity ServiceCreateEvent
func (s *NotificationListenersClientSideApiService) ListenToServiceCreateEvent(ctx context.Context, data ServiceCreateEvent) (ImplResponse, error) {
	// TODO - update ListenToServiceCreateEvent with the required logic for this service method.
	// Add api_notification_listeners_client_side_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(201, EventSubscription{}) or use other options such as http.Ok ...
	//return Response(201, EventSubscription{}), nil

	//TODO: Uncomment the next line to return response Response(400, Error{}) or use other options such as http.Ok ...
	//return Response(400, Error{}), nil

	//TODO: Uncomment the next line to return response Response(401, Error{}) or use other options such as http.Ok ...
	//return Response(401, Error{}), nil

	//TODO: Uncomment the next line to return response Response(403, Error{}) or use other options such as http.Ok ...
	//return Response(403, Error{}), nil

	//TODO: Uncomment the next line to return response Response(404, Error{}) or use other options such as http.Ok ...
	//return Response(404, Error{}), nil

	//TODO: Uncomment the next line to return response Response(405, Error{}) or use other options such as http.Ok ...
	//return Response(405, Error{}), nil

	//TODO: Uncomment the next line to return response Response(409, Error{}) or use other options such as http.Ok ...
	//return Response(409, Error{}), nil

	//TODO: Uncomment the next line to return response Response(500, Error{}) or use other options such as http.Ok ...
	//return Response(500, Error{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("ListenToServiceCreateEvent method not implemented")
}

// ListenToServiceDeleteEvent - Client listener for entity ServiceDeleteEvent
func (s *NotificationListenersClientSideApiService) ListenToServiceDeleteEvent(ctx context.Context, data ServiceDeleteEvent) (ImplResponse, error) {
	// TODO - update ListenToServiceDeleteEvent with the required logic for this service method.
	// Add api_notification_listeners_client_side_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(201, EventSubscription{}) or use other options such as http.Ok ...
	//return Response(201, EventSubscription{}), nil

	//TODO: Uncomment the next line to return response Response(400, Error{}) or use other options such as http.Ok ...
	//return Response(400, Error{}), nil

	//TODO: Uncomment the next line to return response Response(401, Error{}) or use other options such as http.Ok ...
	//return Response(401, Error{}), nil

	//TODO: Uncomment the next line to return response Response(403, Error{}) or use other options such as http.Ok ...
	//return Response(403, Error{}), nil

	//TODO: Uncomment the next line to return response Response(404, Error{}) or use other options such as http.Ok ...
	//return Response(404, Error{}), nil

	//TODO: Uncomment the next line to return response Response(405, Error{}) or use other options such as http.Ok ...
	//return Response(405, Error{}), nil

	//TODO: Uncomment the next line to return response Response(409, Error{}) or use other options such as http.Ok ...
	//return Response(409, Error{}), nil

	//TODO: Uncomment the next line to return response Response(500, Error{}) or use other options such as http.Ok ...
	//return Response(500, Error{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("ListenToServiceDeleteEvent method not implemented")
}

// ListenToServiceStateChangeEvent - Client listener for entity ServiceStateChangeEvent
func (s *NotificationListenersClientSideApiService) ListenToServiceStateChangeEvent(ctx context.Context, data ServiceStateChangeEvent) (ImplResponse, error) {
	// TODO - update ListenToServiceStateChangeEvent with the required logic for this service method.
	// Add api_notification_listeners_client_side_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(201, EventSubscription{}) or use other options such as http.Ok ...
	//return Response(201, EventSubscription{}), nil

	//TODO: Uncomment the next line to return response Response(400, Error{}) or use other options such as http.Ok ...
	//return Response(400, Error{}), nil

	//TODO: Uncomment the next line to return response Response(401, Error{}) or use other options such as http.Ok ...
	//return Response(401, Error{}), nil

	//TODO: Uncomment the next line to return response Response(403, Error{}) or use other options such as http.Ok ...
	//return Response(403, Error{}), nil

	//TODO: Uncomment the next line to return response Response(404, Error{}) or use other options such as http.Ok ...
	//return Response(404, Error{}), nil

	//TODO: Uncomment the next line to return response Response(405, Error{}) or use other options such as http.Ok ...
	//return Response(405, Error{}), nil

	//TODO: Uncomment the next line to return response Response(409, Error{}) or use other options such as http.Ok ...
	//return Response(409, Error{}), nil

	//TODO: Uncomment the next line to return response Response(500, Error{}) or use other options such as http.Ok ...
	//return Response(500, Error{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("ListenToServiceStateChangeEvent method not implemented")
}
